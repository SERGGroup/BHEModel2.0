include "ffmatlib.idp"

// Parameters
real ratioL = 1000., ratioH = 800.;
real r=1., L=r*ratioL, H=r*ratioH;
real DT=20, gradRock = 0.1;
real Pe=1;
real vx=10, vy=0;

real modv = (vx ^ 2 + vy^2);
vx = vx / modv;
vy = vy / modv;

int Cside=99, Ctop=98, Cbottom=97, Ctube=96, CtubeExt=95;
int pointsH=7, pointsCircle=20, refIndex=5;
int pointsL = pointsH*L/H;

// Define mesh boundary
border C1(t=L, -L){x=t; y=H; label=Ctop;}
border C2(t=H, -H){x=-L; y=t; label=Cside;}
border C3(t=-L, L){x=t; y=-H; label=Cbottom;}
border C4(t=-H, H){x=L; y=t; label=Cside;}

border C0(t=0, 2*pi){x=r*sin(t); y=r*cos(t); label=Ctube;}

// Mesh for visualization purposes
real ratioR=25;
border C01(t=2*pi, 0){x=ratioR*r*sin(t); y=ratioR*r*cos(t); label=CtubeExt;}
mesh ThPlot = buildmesh(C0(10)+C01(100));

// The triangulated domain Th is on the left side of its boundary
mesh Th = buildmesh(C0(pointsCircle)+C1(pointsL)+C2(pointsH)+C3(pointsL)+C4(pointsH));
Th = splitmesh(Th, 2 + int(refIndex * r / sqrt(x*x + y*y)));

// The finite element space defined over Th is called here Vh
fespace Vh(Th, P1);
Vh u, v, f=gradRock;	// Define u and v as piecewise-P1 continuous functions

// Define the PDE
solve thermal(u, v, solver=LU)

	= int2d(Th)(    // The bilinear part
		
		dx(u)*dx(v)	
		+ dy(u)*dy(v) +
		Pe * (vx * dx(u) + vy * dy(u)) * v
		
	) - int1d(Th, Cbottom)(
    
		f*v
	
	)
	+ on(Ctop, u=-gradRock*H)
	+ on(Ctube, u=-DT);	// The Dirichlet boundary condition


// Evaluate the mean gradient on the internal circle
Vh fx, fy;
fx = dx(u);
fy = dy(u);

int K = 500; 
real t, fnet, sum=0;

for (int i = 0; i < K + 1; i++){
	
	t = pi * i / K;
    x = r*sin(t);
	y = r*cos(t);
	fnet = fx * sin(t) + fy * cos(t);
	
    // xx[i] = t;
    // yy[i] = u; //value of u at point t
	sum = sum + fnet;

}

cout << "Mean Gradient = " << sum / (K + 1) << " [K/m]" << endl;

savemesh(Th,"well.msh");
ffSaveVh(Th,Vh,"well_vh.txt");
ffSaveData(u,"temperature_field.txt");
ffSaveData2(fx, fy, "temperature_gradient.txt");

ofstream file("mean_gradient.txt");
file.precision(10);
file << sum / (K + 1) << "\n";

// Plot the result
// plot(Th);
plot(u, wait=true, value=true, grey=true, fill=true);

fespace Vplot(ThPlot, P1);
Vplot uplot = u;
plot(uplot, wait=true, value=true, grey=true, fill=true);
