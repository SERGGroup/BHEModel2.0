

include "ffmatlib.idp"

// Parameters

int pointsH=10, pointsCircle=20;
real ratioL=2000, ratioH=1000;
real r=1., L=r*ratioL, H=r*ratioH;
int pointsL = pointsH*L/H;

real T=157.68;
int nT=10000;
real deltat=T/nT;

real gradRock=0.01, DT=1;

int Cside=99, Ctop=98, Cbottom=97,CMeshExt=96, CMeshInt=95, Ctube=94;
real ratioR=100;

// external mesh boundary
border C1(t=L, -L){x=t; y=H; label=Ctop;}
border C2(t=H, -H){x=-L; y=t; label=Cside;}
border C3(t=-L, L){x=t; y=-H; label=Cbottom;}
border C4(t=-H, H){x=L; y=t; label=Cside;}
border C10(t=0, 2*pi){x=ratioR*r*sin(t); y=ratioR*r*cos(t); label=CMeshExt;}

// internal mesh boundary
border C0(t=0, 2*pi){x=r*sin(t); y=r*cos(t); label=Ctube;}
border C01(t=2*pi, 0){x=ratioR*r*sin(t); y=ratioR*r*cos(t); label=CMeshInt;}

// The triangulated domain Th is on the left side of its boundary
mesh ThInt = buildmesh(C0(pointsCircle)+C01(pointsCircle));
mesh ThExt = buildmesh(C10(pointsCircle)+C1(pointsL)+C2(pointsH)+C3(pointsL)+C4(pointsH));

// field initializer
func u0 = -gradRock*y;

// The finite element space defined over ThInt is called here VhInt
fespace VhInt(ThInt, P1);
VhInt uInt, uIntOld, uIntPrev=u0, vInt;	// Define uInt and vInt as piecewise-P1 continuous functions

// The finite element space defined over ThInt is called here VhInt
fespace VhExt(ThExt, P1);
VhExt uExt, vExt, uExtPrev=u0, g=gradRock;	// Define uInt and vInt as piecewise-P1 continuous functions

// DEFINE INTERNAL PROBLEM
problem thermalInt(uInt, vInt, solver=LU)

	= int2d(ThInt)(    
        
        uInt * vInt
		+ deltat * (
		
		    dx(uInt)*dx(vInt)	
		    + dy(uInt)*dy(vInt)
		
		)

	) - int2d(ThInt)(
	
        uIntPrev * vInt

	)  + on(Ctube, uInt=-DT) + on(CMeshInt, uInt=uExtPrev);	// The Dirichlet boundary condition

// DEFINE EXTERNAL PROBLEM
problem thermalExt(uExt, vExt, solver=LU)

	= int2d(ThExt)(    // The bilinear part

        uExt*vExt
		+ deltat * (
		
		    dx(uExt)*dx(vExt)	
		    + dy(uExt)*dy(vExt)
		    
		)

	) - int2d(ThExt)(
	
        uExtPrev * vExt

	) - int1d(ThExt, CMeshExt)(

		-(dx(uIntPrev)*x/(ratioR*r)+ dy(uIntPrev)*y/(ratioR*r))*vExt*deltat

	) - int1d(ThExt, Cbottom)(

        g*vExt*deltat

    )
	+ on(Ctop, uExt=-gradRock*H);	// The Dirichlet boundary condition

real t=0;
int counter=0;

int plotevery = nT / 50;
int saveevery = nT / 200;
real theta, T0=deltat, sum=0;
VhInt fx, fy;

ofstream ff("thermic.dat");

deltat = deltat/nT;

while(t < T0){

	thermalInt;
	thermalExt;
	
	t = t + deltat;
    
	if (counter%saveevery == 0){
        
		sum = 0;
		fx = dx(uInt);
        fy = dy(uInt);
		
        for (int i = 0; i < 1000; i++){
	
            theta = pi * i / 1000;
            x = r*sin(theta);
            y = r*cos(theta);
            sum = sum + (fx * sin(theta) + fy * cos(theta));
        
        }
        
        ff << t << "; " << sum/1000 * 2*pi*r << endl;   
    
    }
	
    uIntPrev=uInt;
    uExtPrev=uExt;
	counter = counter + 1;

	
}

deltat = deltat*nT;
string filename;

while(t < T){

	thermalInt;
	thermalExt;
    
    if (counter%plotevery == 0){
		
		filename = "result" + t + ".eps";
        plot(uInt, ps=filename, value=true, grey=true, fill=true);   
    
    }
    
    if (counter%saveevery == 0){
        
		sum = 0;
                
        fx = dx(uInt);
        fy = dy(uInt);
		
        for (int i = 0; i < 1000; i++){
	
            theta = pi * i / 1000;
            x = r*sin(theta);
            y = r*cos(theta);
            sum = sum + (fx * sin(theta) + fy * cos(theta));
        
        }
        ff << t << "; " << sum/1000 * 2*pi*r << endl;   
    
    }
    
    t = t + deltat;
    counter = counter + 1;
    
    uIntPrev=uInt;
    uExtPrev=uExt;

}

